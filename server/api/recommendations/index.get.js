export default defineEventHandler(async (e) => {
	try {
		const $spotify = e.context.spotify;
		const {
			limit,
			offset,
			seedArtists,
			seedGenres,
			seedTracks,
			minAcousticness,
			maxAcousticness,
			targetAcousticness,
			minDanceability,
			maxDanceability,
			targetDanceability,
			minDurationMs,
			maxDurationMs,
			targetDurationMs,
			minEnergy,
			maxEnergy,
			targetEnergy,
			minInstrumentalness,
			maxInstrumentalness,
			targetInstrumentalness,
			minKey,
			maxKey,
			targetKey,
			minLiveness,
			maxLiveness,
			targetLiveness,
			minLoudness,
			maxLoudness,
			targetLoudness,
			minMode,
			maxMode,
			targetMode,
			minPopularity,
			maxPopularity,
			targetPopularity,
			minSpeechiness,
			maxSpeechiness,
			targetSpeechiness,
			minTempo,
			maxTempo,
			targetTempo,
			minTimeSignature,
			maxTimeSignature,
			targetTimeSignature,
			minValence,
			maxValence,
			targetValence,
		} = getQuery(e);

		// Building the request payload in underscore case
		const res = await $spotify('/recommendations', {
			params: {
				limit,
				offset,
				seed_artists: seedArtists,
				seed_genres: seedGenres,
				seed_tracks: seedTracks,
				min_acousticness: minAcousticness,
				max_acousticness: maxAcousticness,
				target_acousticness: targetAcousticness,
				min_danceability: minDanceability,
				max_danceability: maxDanceability,
				target_danceability: targetDanceability,
				min_duration_ms: minDurationMs,
				max_duration_ms: maxDurationMs,
				target_duration_ms: targetDurationMs,
				min_energy: minEnergy,
				max_energy: maxEnergy,
				target_energy: targetEnergy,
				min_instrumentalness: minInstrumentalness,
				max_instrumentalness: maxInstrumentalness,
				target_instrumentalness: targetInstrumentalness,
				min_key: minKey,
				max_key: maxKey,
				target_key: targetKey,
				min_liveness: minLiveness,
				max_liveness: maxLiveness,
				target_liveness: targetLiveness,
				min_loudness: minLoudness,
				max_loudness: maxLoudness,
				target_loudness: targetLoudness,
				min_mode: minMode,
				max_mode: maxMode,
				target_mode: targetMode,
				min_popularity: minPopularity,
				max_popularity: maxPopularity,
				target_popularity: targetPopularity,
				min_speechiness: minSpeechiness,
				max_speechiness: maxSpeechiness,
				target_speechiness: targetSpeechiness,
				min_tempo: minTempo,
				max_tempo: maxTempo,
				target_tempo: targetTempo,
				min_time_signature: minTimeSignature,
				max_time_signature: maxTimeSignature,
				target_time_signature: targetTimeSignature,
				min_valence: minValence,
				max_valence: maxValence,
				target_valence: targetValence,
			},
		});

		return getSuccessResponse(200, 'Recommendations received', res);
	} catch (err) {
		console.error(err);
		throw createError(getErrorOptions(err));
	}
});
